// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package myfirstmodule.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	/**
	 * @deprecated
	 * The default constructor of the Microflows class should not be used.
	 * Use the static microflow invocation methods instead.
	 */
	@java.lang.Deprecated(since = "9.12", forRemoval = true)
	public Microflows() {}

	// These are the microflows for the MyFirstModule module
	public static void aCT_DeleteAll(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("MyFirstModule.ACT_DeleteAll").withParams(params).execute(context);
	}
	public static void aCT_ExportWithoutQuoteEscapeChar(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("MyFirstModule.ACT_ExportWithoutQuoteEscapeChar").withParams(params).execute(context);
	}
	public static void aCT_TestExportOQLWCharset(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("MyFirstModule.ACT_TestExportOQLWCharset").withParams(params).execute(context);
	}
	public static void aCT_TestExportSQLWCharset(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("MyFirstModule.ACT_TestExportSQLWCharset").withParams(params).execute(context);
	}
	public static void aCT_TestExportWCharset(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("MyFirstModule.ACT_TestExportWCharset").withParams(params).execute(context);
	}
	public static void aCT_TestImportSQLWCharset(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("MyFirstModule.ACT_TestImportSQLWCharset").withParams(params).execute(context);
	}
	public static void aCT_TestImportWCharset(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("MyFirstModule.ACT_TestImportWCharset").withParams(params).execute(context);
	}
	public static java.lang.String calc_Attr(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.String) Core.microflowCall("MyFirstModule.Calc_Attr").withParams(params).execute(context);
	}
	public static void cSV_ExportJPCharset(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("MyFirstModule.CSV_ExportJPCharset").withParams(params).execute(context);
	}
	public static void cSV_ImportJPCharset(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("MyFirstModule.CSV_ImportJPCharset").withParams(params).execute(context);
	}
	public static void iVK_ExportUsingOQL(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("MyFirstModule.IVK_ExportUsingOQL").withParams(params).execute(context);
	}
	public static void iVK_ExportUsingSQL(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("MyFirstModule.IVK_ExportUsingSQL").withParams(params).execute(context);
	}
	public static void iVK_Import(IContext context, java.util.List<myfirstmodule.proxies.CSV> _cSVs)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.List<IMendixObject> listparam_cSVs = null;
		if (_cSVs != null)
		{
			listparam_cSVs = new java.util.ArrayList<>();
			for (var obj : _cSVs) {
				listparam_cSVs.add(obj.getMendixObject());
			}
		}
		params.put("CSVs", listparam_cSVs);

		Core.microflowCall("MyFirstModule.IVK_Import").withParams(params).execute(context);
	}
	public static void iVK_ImportUsingSQL(IContext context, java.util.List<myfirstmodule.proxies.CSV> _cSVs)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.List<IMendixObject> listparam_cSVs = null;
		if (_cSVs != null)
		{
			listparam_cSVs = new java.util.ArrayList<>();
			for (var obj : _cSVs) {
				listparam_cSVs.add(obj.getMendixObject());
			}
		}
		params.put("CSVs", listparam_cSVs);

		Core.microflowCall("MyFirstModule.IVK_ImportUsingSQL").withParams(params).execute(context);
	}
	public static myfirstmodule.proxies.CSV sub_CreateJPCSV(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("MyFirstModule.Sub_CreateJPCSV").withParams(params).execute(context);
		return result == null ? null : myfirstmodule.proxies.CSV.initialize(context, result);
	}
	public static myfirstmodule.proxies.Export sub_CreateJPCSVSQL(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("MyFirstModule.Sub_CreateJPCSVSQL").withParams(params).execute(context);
		return result == null ? null : myfirstmodule.proxies.Export.initialize(context, result);
	}
}
